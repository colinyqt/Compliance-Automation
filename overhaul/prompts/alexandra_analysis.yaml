# prompts/alexandra_analysis_flexible.yaml
name: "Alexandra Tender Analysis - Flexible"
description: "Intelligent and flexible analysis of any tender document with auto-discovered database schema and dynamic category handling."

inputs:
  - name: "tender_document"
    type: "file"
    required: true
    formats: ["txt", "pdf"]
    description: "Tender document to analyze"

databases:
  meters: 'C:\Users\cyqt2\Database\overhaul\databases\meters.db'

processing_steps:
  # STEP 1: Detailed requirement extraction with dynamic category discovery.
  # This prompt instructs the AI to find the meter types mentioned in the document itself.
  - name: "detailed_requirement_extraction"
    description: "Extract all granular meter-related requirements from the tender document by first identifying the meter categories within the text."
    prompt_template: |
      You are an expert electrical engineer specializing in tender specification analysis.
      Your task is to meticulously extract ALL technical specifications for any type of electrical meter mentioned in the document. First, identify the distinct categories of meters being specified (e.g., "Power Quality Meter", "Digital Power Meter", "Main Switchboard Meter"). Use these identified categories in the 'scope' field for each requirement.

      Do not summarize or generalize. Capture every specific detail.

      DOCUMENT CONTENT:
      {{ tender_document.content }}

      Return ONLY a JSON object with the key "requirements", which is a list of all extracted specifications.

      EXAMPLE of a single item in the list:
      {
        "clause": "6.7.1",
        "category": "Accuracy",
        "parameter": "Voltage / Current Accuracy",
        "value": "Â±0.1%",
        "scope": "Power Quality Meter"
      }
      
      JSON output format:
      {
        "requirements": [
          {
            "clause": "string (e.g., 7.0 or 6.5.1)",
            "category": "string (e.g., General, Accuracy, Communication, Environmental, Power Quality Analysis)",
            "parameter": "string (the specific requirement, e.g., 'Internal Memory' or 'Active Energy Accuracy')",
            "value": "string (the required value or standard, e.g., '8GB' or 'Class 0.2s')",
            "scope": "string (The meter category identified from the text, e.g., 'Power Quality Meter', 'Bus-bar Tap-off Unit Meter')"
          }
        ]
      }
    timeout: 180

  # STEP 2: Compliance check and recommendation, adapted for dynamic categories.
  # This step groups requirements by the 'scope' discovered in Step 1.
  - name: "compliance_and_matching"
    description: "Compare extracted requirements against a database of meters and generate a detailed compliance report for each discovered category."
    dependencies: ["detailed_requirement_extraction"]
    prompt_template: |
      You are a product specialist matching electrical meters to tender requirements.
      Based on the detailed list of requirements extracted from the tender, analyze and recommend the most suitable meters from the provided database.

      TENDER REQUIREMENTS:
      {{ detailed_requirement_extraction.parsed_result | tojson(indent=2) }}

      AVAILABLE METER SERIES (for high-level matching):
      {% set series_summary = databases.meters.get_series_summary() %}
      {{ series_summary | tojson(indent=2) }}

      AVAILABLE METERS (for detailed compliance check):
      {% set available_meters = databases.meters.get_all() %}
      {{ available_meters | tojson(indent=2) }}

      Your Task:
      1.  Group the requirements based on the "scope" field identified in the previous step.
      2.  For each discovered scope/category, select the top 2-3 most suitable meter models from the database.
      3.  For each recommended meter, create a detailed compliance breakdown table. The table should list key requirements, the required spec from the tender, the meter's actual spec, and a compliance status (e.g., "Compliant", "Exceeds", "Non-Compliant", "Partial").
      4.  Provide a final recommendation with a clear justification based on the compliance analysis.

      Return JSON format:
      {
        "recommendations": [
          {
            "requirement_scope": "Power Quality Meter",
            "recommended_model": "PowerLogic ION9000",
            "series": "PowerLogic ION9000 Series",
            "overall_assessment": "Highly suitable. Meets or exceeds all critical power quality analysis and accuracy requirements specified in the tender.",
            "compliance_breakdown": [
              { "requirement": "Accuracy (Active Energy)", "tender_spec": "Class 0.2s", "meter_spec": "Class 0.1S", "status": "Exceeds" },
              { "requirement": "Harmonics Viewing", "tender_spec": "up to at least 63rd", "meter_spec": "up to 127th", "status": "Exceeds" },
              { "requirement": "Internal Memory", "tender_spec": "8GB", "meter_spec": "2 GB", "status": "Non-Compliant" },
              { "requirement": "Communication", "tender_spec": "Modbus TCP/IP", "meter_spec": "Modbus TCP/IP, IEC61850", "status": "Compliant" },
              { "requirement": "IP Rating (Front)", "tender_spec": "IP52", "meter_spec": "IP54", "status": "Exceeds" }
            ]
          }
        ]
      }
    timeout: 180

# The output section is updated to be fully dynamic, looping through whatever categories are found.
outputs:
  - type: "json"
    filename: "{{ tender_document.basename }}_analysis_{{ timestamp }}.json"
    data:
      metadata:
        prompt_name: "{{ config.name }}"
        analysis_date: "{{ timestamp }}"
        input_file: "{{ tender_document.basename }}"
        analysis_depth: "detailed_compliance_check"
      extracted_requirements: "{{ detailed_requirement_extraction.parsed_result }}"
      compliance_and_recommendations: "{{ compliance_and_matching.parsed_result }}"